{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74d48106.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\nimport React from 'react'\nimport \"./InfoBox.css\"\n\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n  return (\n    <Card \n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${isRed && 'infoBox--red'}`}>\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n      \n    </Card>\n  )\n}\n\nexport default InfoBox\n","import React from 'react'\nimport numeral from \"numeral\"\nimport { Circle, Popup } from \"react-leaflet\"\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 300,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 450,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 750,\n  }, \n}\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  })\n  return sortedData\n};\n\nexport const prettyPrintStat = (stat) => \n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n\n\n// Draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = \"cases\") => (\n  data.map(country => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\n    >\n\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n          <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n          <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n        </div>\n      </Popup>\n    </Circle>\n  ))\n)\n","import React from \"react\";\nimport \"./Map.css\"\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">\n          OpenStreetMap</a> contributors'\n        />\n        {/* Loop through countries and draw circles on the screen */}\n        {showDataOnMap(countries, casesType )}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import numeral from 'numeral'\nimport React from 'react'\nimport \"./Table.css\"\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({country, cases}) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  )\n}\n\nexport default Table\n","import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\n\nconst buildChartData = (data, casesType) => {\n  const chartData = [];\n  let lastDataPoint;\n  \n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => response.json())\n        .then((data) => {\n          let chartData = buildChartData(data, \"cases\");\n          setData(chartData);\n          console.log(chartData);\n          //buildChart(chartData)\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className=\"props.className\">\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport InfoBox from \"./InfoBox\";\nimport \"./App.css\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { prettyPrintStat, sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746,\n    lng: -40.4796,\n  });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, // United States, United Kingdom, etc.\n            value: country.countryInfo.iso2, // UK, USA, FR, etc.\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n  console.log(\"CountryINFO:\", countryInfo);\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n          countries={mapCountries}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}